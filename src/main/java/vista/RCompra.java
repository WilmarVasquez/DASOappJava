/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import model.Compra;
import model.Usuario;
import controller.CompraController;

import javax.swing.*;
import java.sql.SQLException;
/**
 *
 * @author alberto
 */
public class RCompra extends javax.swing.JFrame {
    private int idUsuario; // ID del usuario
    private CompraController compraController; // Controlador de compras
    /**
     * Creates new form RCompra
     */
   public RCompra(int idUsuario, CompraController compraController) {
        initComponents();
        this.idUsuario = idUsuario; // Asignar ID del usuario
        this.compraController = compraController; // Asignar controlador
        setLocationRelativeTo(null); // Centrar la ventana
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cantidadtxt = new javax.swing.JTextField();
        preciotxt = new javax.swing.JTextField();
        totalinvestxt = new javax.swing.JTextField();
        idcompratxt = new javax.swing.JTextField();
        registrarbtn = new javax.swing.JButton();
        cancelarbtn = new javax.swing.JButton();
        editarbtn = new javax.swing.JButton();
        eliminarbtn = new javax.swing.JButton();
        tickettxt = new javax.swing.JTextField();
        buscarbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REGISTRO DE COMPRA");

        cantidadtxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cantidadtxt.setText("CANTIDAD");

        preciotxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        preciotxt.setText("PRECIO X TICKET");

        totalinvestxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalinvestxt.setText("TOTAL INVERSION");

        idcompratxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idcompratxt.setText("ID COMPRA");

        registrarbtn.setText("REGISTRAR COMPRA");
        registrarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarbtnActionPerformed(evt);
            }
        });

        cancelarbtn.setText("CANCELAR");
        cancelarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarbtnActionPerformed(evt);
            }
        });

        editarbtn.setText("EDITAR");
        editarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarbtnActionPerformed(evt);
            }
        });

        eliminarbtn.setText("ELIMINAR");
        eliminarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarbtnActionPerformed(evt);
            }
        });

        tickettxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tickettxt.setText("TICKET");

        buscarbtn.setText("BUSCAR");
        buscarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cantidadtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(preciotxt)
                                .addComponent(totalinvestxt)
                                .addComponent(idcompratxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tickettxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                                .addComponent(registrarbtn)
                                .addGap(0, 6, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buscarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eliminarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelarbtn))
                                .addGap(38, 38, 38))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrarbtn)
                    .addComponent(tickettxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cantidadtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(preciotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eliminarbtn)
                    .addComponent(totalinvestxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idcompratxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarbtn))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarbtnActionPerformed
        // Cerrar el formulario actual (RegistroU)
        dispose();
    }//GEN-LAST:event_cancelarbtnActionPerformed

    private void registrarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarbtnActionPerformed
               // TODO add your handling code here:
     try {
            // Validar que los campos no estén vacíos
            if (tickettxt.getText().isEmpty() || cantidadtxt.getText().isEmpty() || 
                preciotxt.getText().isEmpty() || totalinvestxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Recoger datos del formulario
            String ticket = tickettxt.getText();
            int cantidad = Integer.parseInt(cantidadtxt.getText());
            double precioTicket = Double.parseDouble(preciotxt.getText());
            double totalInversion = Double.parseDouble(totalinvestxt.getText());

            // Crear una instancia de Compra
            Compra compra = new Compra();
            compra.setFechaCompra(new java.util.Date()); // Fecha actual
            compra.setTicket(ticket);
            compra.setCantidad(cantidad);
            compra.setPrecioTicket(precioTicket);
            compra.setTotalInversion(totalInversion);

            // Relacionar con el usuario
            Usuario usuario = new Usuario();
            usuario.setIdUsuario(idUsuario);
            compra.setUsuario(usuario);

            // Registrar la compra usando el controlador
            compraController.agregarCompra(compra);

            JOptionPane.showMessageDialog(this, "Compra registrada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Limpiar campos
            tickettxt.setText("");
            cantidadtxt.setText("");
            preciotxt.setText("");
            totalinvestxt.setText("");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar la compra en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_registrarbtnActionPerformed

    private void editarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarbtnActionPerformed
        // TODO add your handling code here:
          try {
        // Validar que el campo "idcompratxt" no esté vacío
        String idCompraStr = idcompratxt.getText();
        if (idCompraStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID de la compra a editar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir el ID a entero
        int idCompra = Integer.parseInt(idCompraStr);

        // Validar que los demás campos no estén vacíos
        if (tickettxt.getText().isEmpty() || cantidadtxt.getText().isEmpty() ||
            preciotxt.getText().isEmpty() || totalinvestxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Recoger los valores de los campos del formulario
        String ticket = tickettxt.getText();
        int cantidad = Integer.parseInt(cantidadtxt.getText());
        double precioTicket = Double.parseDouble(preciotxt.getText());
        double totalInversion = Double.parseDouble(totalinvestxt.getText());

        // Crear una instancia de Compra con los nuevos valores
        Compra compra = new Compra();
        compra.setIdCompra(idCompra);
        compra.setFechaCompra(new java.util.Date()); // Mantener la fecha actual
        compra.setTicket(ticket);
        compra.setCantidad(cantidad);
        compra.setPrecioTicket(precioTicket);
        compra.setTotalInversion(totalInversion);

        // Relacionar con el usuario
        Usuario usuario = new Usuario();
        usuario.setIdUsuario(idUsuario); // Utilizar el ID del usuario existente
        compra.setUsuario(usuario);

        // Usar el controlador para actualizar la compra
        compraController.actualizarCompra(compra);

        JOptionPane.showMessageDialog(this, "Compra actualizada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Opcional: Limpiar campos después de actualizar
        tickettxt.setText("");
        cantidadtxt.setText("");
        preciotxt.setText("");
        totalinvestxt.setText("");
        idcompratxt.setText("");

    } catch (NumberFormatException e) {
        // Manejar errores de formato
        JOptionPane.showMessageDialog(this, "Error en el formato de los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        // Manejar errores de SQL
        JOptionPane.showMessageDialog(this, "Error al actualizar la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_editarbtnActionPerformed

    private void buscarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarbtnActionPerformed
        // TODO add your handling code here:
          try {
        // Obtener el valor del campo "idcompratxt"
        String idCompraStr = idcompratxt.getText();

        // Validar que no esté vacío
        if (idCompraStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de compra.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir el valor a entero
        int idCompra = Integer.parseInt(idCompraStr);

        // Usar el controlador para buscar la compra
        Compra compra = compraController.leerCompra(idCompra);

        if (compra != null) {
            // Mostrar los datos en los campos correspondientes
            tickettxt.setText(compra.getTicket());
            cantidadtxt.setText(String.valueOf(compra.getCantidad()));
            preciotxt.setText(String.valueOf(compra.getPrecioTicket()));
            totalinvestxt.setText(String.valueOf(compra.getTotalInversion()));
            JOptionPane.showMessageDialog(this, "Datos de la compra encontrados.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Mostrar mensaje si no se encuentra la compra
            JOptionPane.showMessageDialog(this, "No se encontró una compra con el ID proporcionado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    } catch (NumberFormatException e) {
        // Manejar error de formato en el ID de compra
        JOptionPane.showMessageDialog(this, "El ID de compra debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        // Manejar errores de SQL
        JOptionPane.showMessageDialog(this, "Error al buscar la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_buscarbtnActionPerformed

    private void eliminarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarbtnActionPerformed
        // TODO add your handling code here:
        try {
        // Validar que el campo "idcompratxt" no esté vacío
        String idCompraStr = idcompratxt.getText();
        if (idCompraStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID de la compra a eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir el ID a entero
        int idCompra = Integer.parseInt(idCompraStr);

        // Confirmar la eliminación
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de que desea eliminar la compra con ID " + idCompra + "?", 
            "Confirmar Eliminación", 
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Usar el controlador para eliminar la compra
            compraController.eliminarCompra(idCompra);

            JOptionPane.showMessageDialog(this, "Compra eliminada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Limpiar campos después de eliminar
            tickettxt.setText("");
            cantidadtxt.setText("");
            preciotxt.setText("");
            totalinvestxt.setText("");
            idcompratxt.setText("");
        }

    } catch (NumberFormatException e) {
        // Manejar errores de formato
        JOptionPane.showMessageDialog(this, "El ID de compra debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        // Manejar errores de SQL
        JOptionPane.showMessageDialog(this, "Error al eliminar la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_eliminarbtnActionPerformed

    /**
     * @param args the command line arguments
     */
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarbtn;
    private javax.swing.JButton cancelarbtn;
    private javax.swing.JTextField cantidadtxt;
    private javax.swing.JButton editarbtn;
    private javax.swing.JButton eliminarbtn;
    private javax.swing.JTextField idcompratxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField preciotxt;
    private javax.swing.JButton registrarbtn;
    private javax.swing.JTextField tickettxt;
    private javax.swing.JTextField totalinvestxt;
    // End of variables declaration//GEN-END:variables
}
